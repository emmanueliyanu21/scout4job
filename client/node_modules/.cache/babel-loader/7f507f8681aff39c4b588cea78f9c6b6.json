{"ast":null,"code":"import axios from\"axios\";import setAuthToken from\"../utils/setAuthToken\";import jwt_decode from\"jwt-decode\";import{GET_ERRORS,SET_CURRENT_USER,USER_LOADING}from\"./types\";// Register User\nexport var registerUser=function registerUser(userData,history){return function(dispatch){axios.post(\"/api/users/register\",userData).then(function(res){return history.push(\"/login\");})// re-direct to login on successful register\n.catch(function(err){return dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Login - get user token\nexport var loginUser=function loginUser(userData){return function(dispatch){axios.post(\"/api/users/login\",userData).then(function(res){// Save to localStorage\n// Set token to localStorage\nvar token=res.data.token;localStorage.setItem(\"jwtToken\",token);// Set token to Auth header\nsetAuthToken(token);// Decode token to get user data\nvar decoded=jwt_decode(token);// Set current user\ndispatch(setCurrentUser(decoded));}).catch(function(err){return dispatch({type:GET_ERRORS,payload:err.response.data});});};};// Set logged in user\nexport var setCurrentUser=function setCurrentUser(decoded){return{type:SET_CURRENT_USER,payload:decoded};};// User loading\nexport var setUserLoading=function setUserLoading(){return{type:USER_LOADING};};// Log user out\nexport var logoutUser=function logoutUser(){return function(dispatch){// Remove token from local storage\nlocalStorage.removeItem(\"jwtToken\");// Remove auth header for future requests\nsetAuthToken(false);// Set current user to empty object {} which will set isAuthenticated to false\ndispatch(setCurrentUser({}));};};","map":{"version":3,"sources":["/xampp/scout4job/client/src/store/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","registerUser","userData","history","dispatch","post","then","res","push","catch","err","type","payload","response","data","loginUser","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,YAAP,KAAyB,uBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,YAAvB,CACA,OAASC,UAAT,CAAqBC,gBAArB,CAAuCC,YAAvC,KAA2D,SAA3D,CAEA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,QAAD,CAAWC,OAAX,QAAuB,UAAAC,QAAQ,CAAI,CAC3DT,KAAK,CACAU,IADL,CACU,qBADV,CACiCH,QADjC,EAEKI,IAFL,CAEU,SAAAC,GAAG,QAAIJ,CAAAA,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ,EAFb,CAEyC;AAFzC,CAGKC,KAHL,CAGW,SAAAC,GAAG,QACNN,CAAAA,QAAQ,CAAC,CACLO,IAAI,CAAEb,UADD,CAELc,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFjB,CAAD,CADF,EAHd,EASH,CAV2B,EAArB,CAWP;AACA,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAb,QAAQ,QAAI,UAAAE,QAAQ,CAAI,CAC7CT,KAAK,CACAU,IADL,CACU,kBADV,CAC8BH,QAD9B,EAEKI,IAFL,CAEU,SAAAC,GAAG,CAAI,CACT;AACA;AAFS,GAGDS,CAAAA,KAHC,CAGST,GAAG,CAACO,IAHb,CAGDE,KAHC,CAITC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAiCF,KAAjC,EACA;AACApB,YAAY,CAACoB,KAAD,CAAZ,CACA;AACA,GAAMG,CAAAA,OAAO,CAAGtB,UAAU,CAACmB,KAAD,CAA1B,CACA;AACAZ,QAAQ,CAACgB,cAAc,CAACD,OAAD,CAAf,CAAR,CACH,CAbL,EAcKV,KAdL,CAcW,SAAAC,GAAG,QACNN,CAAAA,QAAQ,CAAC,CACLO,IAAI,CAAEb,UADD,CAELc,OAAO,CAAEF,GAAG,CAACG,QAAJ,CAAaC,IAFjB,CAAD,CADF,EAdd,EAoBH,CArBgC,EAA1B,CAsBP;AACA,MAAO,IAAMM,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,CAAAD,OAAO,CAAI,CACrC,MAAO,CACHR,IAAI,CAAEZ,gBADH,CAEHa,OAAO,CAAEO,OAFN,CAAP,CAIH,CALM,CAMP;AACA,MAAO,IAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAChC,MAAO,CACHV,IAAI,CAAEX,YADH,CAAP,CAGH,CAJM,CAKP;AACA,MAAO,IAAMsB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SAAM,UAAAlB,QAAQ,CAAI,CACxC;AACAa,YAAY,CAACM,UAAb,CAAwB,UAAxB,EACA;AACA3B,YAAY,CAAC,KAAD,CAAZ,CACA;AACAQ,QAAQ,CAACgB,cAAc,CAAC,EAAD,CAAf,CAAR,CACH,CAPyB,EAAnB","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const registerUser = (userData, history) => dispatch => {\n    axios\n        .post(\"/api/users/register\", userData)\n        .then(res => history.push(\"/login\")) // re-direct to login on successful register\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n    axios\n        .post(\"/api/users/login\", userData)\n        .then(res => {\n            // Save to localStorage\n            // Set token to localStorage\n            const { token } = res.data;\n            localStorage.setItem(\"jwtToken\", token);\n            // Set token to Auth header\n            setAuthToken(token);\n            // Decode token to get user data\n            const decoded = jwt_decode(token);\n            // Set current user\n            dispatch(setCurrentUser(decoded));\n        })\n        .catch(err =>\n            dispatch({\n                type: GET_ERRORS,\n                payload: err.response.data\n            })\n        );\n};\n// Set logged in user\nexport const setCurrentUser = decoded => {\n    return {\n        type: SET_CURRENT_USER,\n        payload: decoded\n    };\n};\n// User loading\nexport const setUserLoading = () => {\n    return {\n        type: USER_LOADING\n    };\n};\n// Log user out\nexport const logoutUser = () => dispatch => {\n    // Remove token from local storage\n    localStorage.removeItem(\"jwtToken\");\n    // Remove auth header for future requests\n    setAuthToken(false);\n    // Set current user to empty object {} which will set isAuthenticated to false\n    dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}